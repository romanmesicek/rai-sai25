# .github/workflows/deploy-slides.yml
name: Deploy All Slides

on:
  push:
    branches: [ main ]
    paths:
      - 'slides/**.md'           # Trigger on slides changes
      - 'slides/images/**'       # Trigger on image changes
      - 'slides/themes/**'       # Trigger on theme changes
      - 'resources/**.md'        # Trigger on resources changes
      - 'papers/**.pdf'          # Trigger on papers changes
  workflow_dispatch:             # Manual trigger available

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          npm install -g @marp-team/marp-cli
          # Install pandoc for markdown to HTML conversion
          # Install poppler-utils for pdfinfo (PDF metadata extraction)
          sudo apt-get update
          sudo apt-get install -y pandoc poppler-utils
      
      - name: Build all slides
        run: |
          set -e  # Exit on error
          mkdir -p dist

          # Debug: Check directories
          echo "=== Checking project structure ==="
          echo "Slides directory:"
          ls -la slides/ || echo "No slides directory found"
          echo ""
          echo "Themes directory:"
          ls -la slides/themes/ || echo "No themes directory found"
          echo ""

          # Copy images if they exist
          if [ -d "slides/images" ]; then
            echo "Copying images to dist/"
            cp -r slides/images dist/
          fi

          # Copy themes to dist for reference
          if [ -d "slides/themes" ]; then
            echo "Copying themes to dist/"
            cp -r slides/themes dist/themes
          fi

          # Convert every .md to HTML and PDF
          echo "=== Building presentations ==="
          for file in slides/*.md; do
            if [ -f "$file" ]; then
              name=$(basename "$file" .md)
              echo "----------------------------------------"
              echo "Building: $name"
              echo "Source file: $file"

              # Build HTML with theme
              if [ -f "slides/themes/neutral.css" ]; then
                echo "Building HTML with neutral theme..."
                marp --theme slides/themes/neutral.css --html "$file" -o "dist/${name}.html" --allow-local-files
                echo "✓ HTML created: dist/${name}.html"
              else
                echo "Building HTML without theme..."
                marp --html "$file" -o "dist/${name}.html" --allow-local-files
                echo "✓ HTML created: dist/${name}.html"
              fi

              # Build PDF with theme
              if [ -f "slides/themes/neutral.css" ]; then
                echo "Building PDF with neutral theme..."
                if marp --theme slides/themes/neutral.css --pdf "$file" -o "dist/${name}.pdf" --allow-local-files; then
                  echo "✓ PDF created: dist/${name}.pdf"
                else
                  echo "⚠ PDF creation failed for $name (continuing...)"
                fi
              else
                echo "Building PDF without theme..."
                if marp --pdf "$file" -o "dist/${name}.pdf" --allow-local-files; then
                  echo "✓ PDF created: dist/${name}.pdf"
                else
                  echo "⚠ PDF creation failed for $name (continuing...)"
                fi
              fi
            fi
          done

          echo "=== Build complete ==="
          echo "Generated files:"
          ls -lh dist/

      - name: Build resources
        run: |
          # Check if resources directory exists and has markdown files
          if [ -d "resources" ] && [ -n "$(find resources -maxdepth 1 -name '*.md' 2>/dev/null)" ]; then
            echo "=== Building resources ==="
            mkdir -p dist/resources

            # Process each markdown file in resources (exclude .gitkeep and README files)
            for file in resources/*.md; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")

                # Skip README files
                if [[ "$filename" == "README.md" ]] || [[ "$filename" == ".gitkeep" ]]; then
                  echo "Skipping: $filename"
                  continue
                fi

                name=$(basename "$file" .md)
                echo "Building resource: $name"

                # Extract title from first H1 in markdown, or use formatted filename
                page_title=$(grep -m 1 "^# " "$file" | sed 's/^# //' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                if [ -z "$page_title" ]; then
                  page_title=$(echo "$name" | sed 's/[-_]/ /g' | sed 's/\b\(.\)/\u\1/g')
                fi

                # Create temporary file without the first H1 (to avoid duplicate headers)
                temp_md=$(mktemp)
                sed '0,/^# /d' "$file" > "$temp_md"

                # Convert markdown to HTML using pandoc with nice styling
                # We set the title via metadata and remove first H1 from content
                pandoc "$temp_md" -f markdown -t html5 \
                  --standalone \
                  --metadata title="$page_title" \
                  --css="../resources-style.css" \
                  -o "dist/resources/${name}.html"

                # Clean up temp file
                rm -f "$temp_md"

                echo "✓ Resource created: dist/resources/${name}.html"
              fi
            done

            # Create a simple CSS file for resources
            cat > dist/resources-style.css << 'EOFCSS'
          body {
            font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            max-width: 900px;
            margin: 0 auto;
            padding: 3rem 2rem;
            background: #fafafa;
            color: #000000;
            line-height: 1.6;
          }
          h1, h2, h3 {
            color: #000000;
            font-weight: 400;
            margin-top: 2rem;
            margin-bottom: 1rem;
          }
          h1 { font-size: 2.5rem; }
          h2 { font-size: 2rem; }
          h3 { font-size: 1.5rem; }
          a {
            color: #2ea043;
            text-decoration: none;
            border-bottom: 1px solid transparent;
            transition: border-color 0.2s ease;
          }
          a:hover {
            border-bottom-color: #2ea043;
          }
          p {
            margin-bottom: 1rem;
          }
          ul, ol {
            margin-bottom: 1rem;
            padding-left: 2rem;
          }
          li {
            margin-bottom: 0.5rem;
          }
          code {
            background: #f3f4f6;
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-size: 0.9em;
          }
          pre {
            background: #f3f4f6;
            padding: 1rem;
            border-radius: 6px;
            overflow-x: auto;
            margin-bottom: 1rem;
          }
          pre code {
            background: transparent;
            padding: 0;
          }
          blockquote {
            border-left: 4px solid #2ea043;
            padding-left: 1rem;
            margin-left: 0;
            color: #555;
            font-style: italic;
          }
          img {
            max-width: 100%;
            height: auto;
            border-radius: 6px;
          }
          table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 1rem;
          }
          th, td {
            border: 1px solid #ddd;
            padding: 0.75rem;
            text-align: left;
          }
          th {
            background-color: #f3f4f6;
            font-weight: 600;
          }
          @media (prefers-color-scheme: dark) {
            body {
              background: #1a1a1a;
              color: #e0e0e0;
            }
            h1, h2, h3 {
              color: #ffffff;
            }
            a {
              color: #4ade80;
            }
            a:hover {
              border-bottom-color: #4ade80;
            }
            code {
              background: #2a2a2a;
            }
            pre {
              background: #2a2a2a;
            }
            th {
              background-color: #2a2a2a;
            }
            td {
              border-color: #3a3a3a;
            }
          }
          EOFCSS

            echo "=== Resources built successfully ==="
          else
            echo "=== No resources directory or markdown files found, skipping ==="
          fi

      - name: Copy papers
        run: |
          # Check if papers directory exists and has PDF files
          if [ -d "papers" ] && [ -n "$(find papers -maxdepth 1 -name '*.pdf' 2>/dev/null)" ]; then
            echo "=== Copying papers ==="
            mkdir -p dist/papers

            # Copy all PDFs to dist
            for file in papers/*.pdf; do
              if [ -f "$file" ]; then
                name=$(basename "$file")
                cp "$file" "dist/papers/$name"

                # Get file size in human-readable format
                size=$(du -h "$file" | cut -f1)
                echo "✓ Copied: $name ($size)"
              fi
            done

            echo "=== Papers copied successfully ==="
          else
            echo "=== No papers directory or PDF files found, skipping ==="
          fi
      
      - name: Generate index
        run: |
          cat > dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>SAI25 Course Presentations</title>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <style>
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }
                  body {
                      font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
                      max-width: 1000px;
                      margin: 0 auto;
                      padding: 3rem 2rem;
                      background: #fafafa;
                      color: #000000;
                      line-height: 1.6;
                  }
                  h1 {
                      color: #000000;
                      font-size: 2.5rem;
                      font-weight: 400;
                      margin-bottom: 0.5rem;
                  }
                  .subtitle {
                      color: #666;
                      font-size: 1.1rem;
                      margin-bottom: 3rem;
                  }
                  .section {
                      margin-bottom: 4rem;
                  }
                  .section-title {
                      font-size: 1.8rem;
                      font-weight: 400;
                      margin-bottom: 1.5rem;
                      padding-bottom: 0.5rem;
                      border-bottom: 2px solid #e0e0e0;
                  }
                  .slides {
                      display: grid;
                      gap: 1.5rem;
                  }
                  .slide-item {
                      background: #ffffff;
                      border-radius: 12px;
                      padding: 1.5rem;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
                      transition: box-shadow 0.2s ease, transform 0.2s ease;
                  }
                  .slide-item:hover {
                      box-shadow: 0 4px 16px rgba(0,0,0,0.12);
                      transform: translateY(-2px);
                  }
                  .slide-header {
                      display: flex;
                      justify-content: space-between;
                      align-items: flex-start;
                      gap: 1rem;
                      margin-bottom: 0.75rem;
                  }
                  .slide-info {
                      flex: 1;
                  }
                  .slide-title {
                      font-weight: 600;
                      font-size: 1.3rem;
                      color: #000000;
                      margin-bottom: 0.5rem;
                      text-transform: capitalize;
                  }
                  .slide-description {
                      color: #555;
                      font-size: 0.95rem;
                      line-height: 1.5;
                      margin-top: 0.5rem;
                  }
                  .slide-links {
                      display: flex;
                      gap: 0.75rem;
                      flex-shrink: 0;
                  }
                  a {
                      padding: 0.6rem 1.2rem;
                      text-decoration: none;
                      border-radius: 6px;
                      color: white;
                      font-weight: 500;
                      font-size: 0.9rem;
                      transition: opacity 0.2s ease, transform 0.1s ease;
                      display: inline-block;
                  }
                  a:hover {
                      opacity: 0.9;
                      transform: scale(1.02);
                  }
                  a:active {
                      transform: scale(0.98);
                  }
                  .btn-view { background: #2ea043; }
                  .btn-pdf { background: #e74c3c; }
                  .btn-resource { background: #3498db; }
                  .btn-download { background: #e67e22; }
                  .file-size {
                      color: #999;
                      font-size: 0.85rem;
                      margin-left: 0.5rem;
                  }

                  /* Dark mode support */
                  @media (prefers-color-scheme: dark) {
                      body {
                          background: #1a1a1a;
                          color: #e0e0e0;
                      }
                      h1, .section-title {
                          color: #ffffff;
                      }
                      .subtitle {
                          color: #b0b0b0;
                      }
                      .slide-item {
                          background: #2a2a2a;
                          box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                      }
                      .slide-item:hover {
                          box-shadow: 0 4px 16px rgba(0,0,0,0.5);
                      }
                      .slide-title {
                          color: #ffffff;
                      }
                      .slide-description {
                          color: #b0b0b0;
                      }
                      .section-title {
                          border-bottom-color: #3a3a3a;
                      }
                      .file-size {
                          color: #888;
                      }
                  }

                  @media (max-width: 768px) {
                      body {
                          padding: 2rem 1rem;
                      }
                      .slide-header {
                          flex-direction: column;
                      }
                      .slide-links {
                          width: 100%;
                      }
                      a {
                          flex: 1;
                          text-align: center;
                      }
                  }
              </style>
          </head>
          <body>
              <h1>📚 SAI25 Course Materials</h1>
              <p class="subtitle">Sustainability and AI for Green | Winter Semester 2025</p>
          EOF

          # Check if slides exist
          if [ -d "slides" ] && [ -n "$(find slides -maxdepth 1 -name '*.md' -type f 2>/dev/null)" ]; then
            cat >> dist/index.html << 'EOF'
              <div class="section">
                  <h2 class="section-title">📊 Course Slides</h2>
                  <div class="slides">
          EOF

            # Add all presentations to index with descriptions
            for file in slides/*.md; do
              if [ -f "$file" ]; then
                name=$(basename "$file" .md)

                # Check if HTML was generated
                if [ -f "dist/${name}.html" ]; then
                  title=$(echo "$name" | sed 's/[-_]/ /g')

                  # Extract description from markdown file (look for <!-- description: ... -->)
                  description=$(grep -m 1 "<!-- description:" "$file" | sed 's/<!-- description: \(.*\) -->/\1/' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

                  if [ -z "$description" ]; then
                    description="Course presentation slides"
                  fi

                  echo "<div class='slide-item'>" >> dist/index.html
                  echo "  <div class='slide-header'>" >> dist/index.html
                  echo "    <div class='slide-info'>" >> dist/index.html
                  echo "      <div class='slide-title'>$title</div>" >> dist/index.html
                  echo "      <div class='slide-description'>$description</div>" >> dist/index.html
                  echo "    </div>" >> dist/index.html
                  echo "    <div class='slide-links'>" >> dist/index.html
                  echo "      <a href='${name}.html' class='btn-view'>View</a>" >> dist/index.html
                  [ -f "dist/${name}.pdf" ] && echo "      <a href='${name}.pdf' class='btn-pdf'>PDF</a>" >> dist/index.html
                  echo "    </div>" >> dist/index.html
                  echo "  </div>" >> dist/index.html
                  echo "</div>" >> dist/index.html
                fi
              fi
            done

            cat >> dist/index.html << 'EOF'
                  </div>
              </div>
          EOF
          fi

          # Add Papers section (BEFORE Resources!)
          # Add Papers section
          if [ -d "papers" ] && [ -n "$(find papers -maxdepth 1 -name '*.pdf' 2>/dev/null)" ]; then
            cat >> dist/index.html << 'EOF'
              <div class="section">
                  <h2 class="section-title">📚 Literature & Papers</h2>
                  <div class="slides">
          EOF

            # Create temporary file for sorting
            temp_papers=$(mktemp)

            # Collect papers with metadata
            for file in papers/*.pdf; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")

                # Skip README, .gitkeep, and other non-PDF files
                if [[ "$filename" == "README.md" ]] || [[ "$filename" == ".gitkeep" ]] || [[ ! "$filename" =~ \.pdf$ ]]; then
                  continue
                fi

                # Add to temp file for sorting
                echo "$file" >> "$temp_papers"
              fi
            done

            # Sort papers alphabetically and process
            sort "$temp_papers" | while IFS= read -r file; do
              if [ -f "$file" ]; then
                name=$(basename "$file" .pdf)
                filename=$(basename "$file")

                # Get file size
                size=$(du -h "$file" | cut -f1)

                # Try to extract PDF metadata (title only) if pdfinfo is available
                # Note: We don't use author metadata as it often only shows first author
                title=""
                if command -v pdfinfo &> /dev/null; then
                  title=$(pdfinfo "$file" 2>/dev/null | grep "^Title:" | sed 's/Title:\s*//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

                  # Clear title if it's just "Untitled" or empty
                  if [ "$title" = "Untitled" ] || [ -z "$title" ]; then
                    title=""
                  fi
                fi

                # Use title from PDF metadata, or show filename without extension
                if [ -n "$title" ]; then
                  citation="$title"
                else
                  # No metadata - show filename without .pdf extension
                  citation="$name"
                fi

                echo "<div class='slide-item'>" >> dist/index.html
                echo "  <div class='slide-header'>" >> dist/index.html
                echo "    <div class='slide-info'>" >> dist/index.html
                echo "      <div class='slide-title'>$citation</div>" >> dist/index.html
                echo "      <div class='slide-description'>PDF ($size)</div>" >> dist/index.html
                echo "    </div>" >> dist/index.html
                echo "    <div class='slide-links'>" >> dist/index.html
                echo "      <a href='papers/${filename}' class='btn-download' download>Download</a>" >> dist/index.html
                echo "    </div>" >> dist/index.html
                echo "  </div>" >> dist/index.html
                echo "</div>" >> dist/index.html
              fi
            done

            # Clean up temp file
            rm -f "$temp_papers"

            cat >> dist/index.html << 'EOF'
                  </div>
              </div>
          EOF
          fi

          # Add Resources section (AFTER Papers!)
          # Check if resources exist (excluding README.md and contact-support.md)
          resource_count=$(find resources -maxdepth 1 -name '*.md' ! -name 'README.md' ! -name 'contact-support.md' 2>/dev/null | wc -l)
          if [ -d "resources" ] && [ "$resource_count" -gt 0 ]; then
            cat >> dist/index.html << 'EOF'
              <div class="section">
                  <h2 class="section-title">🔗 Resources</h2>
                  <div class="slides">
          EOF

            for file in resources/*.md; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")

                # Skip README and contact-support files
                if [[ "$filename" == "README.md" ]] || [[ "$filename" == "contact-support.md" ]] || [[ "$filename" == ".gitkeep" ]]; then
                  continue
                fi

                name=$(basename "$file" .md)

                # Check if HTML was generated
                if [ -f "dist/resources/${name}.html" ]; then
                  # Extract H1 title from markdown file (same as page title)
                  title=$(grep -m 1 "^# " "$file" | sed 's/^# //' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

                  # Fallback to formatted filename if no H1
                  if [ -z "$title" ]; then
                    title=$(echo "$name" | sed 's/[-_]/ /g' | sed 's/\b\(.\)/\u\1/g')
                  fi

                  # Extract description (optional)
                  description=$(grep -m 1 "<!-- description:" "$file" | sed 's/<!-- description: \(.*\) -->/\1/' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

                  if [ -z "$description" ]; then
                    description="Additional course resources and links"
                  fi

                  echo "<div class='slide-item'>" >> dist/index.html
                  echo "  <div class='slide-header'>" >> dist/index.html
                  echo "    <div class='slide-info'>" >> dist/index.html
                  echo "      <div class='slide-title'>$title</div>" >> dist/index.html
                  echo "      <div class='slide-description'>$description</div>" >> dist/index.html
                  echo "    </div>" >> dist/index.html
                  echo "    <div class='slide-links'>" >> dist/index.html
                  echo "      <a href='resources/${name}.html' class='btn-resource'>View</a>" >> dist/index.html
                  echo "    </div>" >> dist/index.html
                  echo "  </div>" >> dist/index.html
                  echo "</div>" >> dist/index.html
                fi
              fi
            done

            cat >> dist/index.html << 'EOF'
                  </div>
              </div>
          EOF
          fi

          # Add footer with conditional contact link
          echo "              <footer style=\"margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #ddd; text-align: center; color: #666; font-size: 0.9rem;\">" >> dist/index.html
          echo "                  <p>UAS IMC Krems | Winter Term 2025 | Roman Mesicek</p>" >> dist/index.html

          # Add contact link if contact-support.md exists
          if [ -f "dist/resources/contact-support.html" ]; then
            echo "                  <p style=\"margin-top: 0.5rem;\"><a href=\"resources/contact-support.html\" style=\"color: #666; text-decoration: underline;\">Contact & Support</a></p>" >> dist/index.html
          fi

          cat >> dist/index.html << 'EOF'
              </footer>
          </body>
          </html>
          EOF

          echo "=== Index page generated ==="
          echo "Summary:"
          [ -d "slides" ] && echo "  - Slides: $(find slides/ -maxdepth 1 -name '*.md' -type f 2>/dev/null | wc -l)"
          [ -d "resources" ] && echo "  - Resources: $(find resources/ -maxdepth 1 -name '*.md' -type f 2>/dev/null | wc -l)"
          [ -d "papers" ] && echo "  - Papers: $(find papers/ -maxdepth 1 -name '*.pdf' -type f 2>/dev/null | wc -l)"
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist
      
      - name: Deploy to Pages
        uses: actions/deploy-pages@v4